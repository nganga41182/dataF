R·∫•t s·∫µn l√≤ng! V·ªõi kinh nghi·ªám tri·ªÉn khai ·ª©ng d·ª•ng Streamlit, t√¥i s·∫Ω cung c·∫•p cho b·∫°n m·ªôt khung m√£ Python ho√†n ch·ªânh ƒë·ªÉ t√≠ch h·ª£p ch·ª©c nƒÉng chat v·ªõi Gemini, s·ª≠ d·ª•ng c√°c ph∆∞∆°ng ph√°p t·ªët nh·∫•t c·ªßa Streamlit nh∆∞ st.session_state ƒë·ªÉ qu·∫£n l√Ω l·ªãch s·ª≠ tr√≤ chuy·ªán.

V√¨ b·∫°n mu·ªën gi·ªØ nguy√™n c√°c ƒëo·∫°n m√£ kh√°c c·ªßa m√¨nh, t√¥i s·∫Ω tr√¨nh b√†y ph·∫ßn m√£ d∆∞·ªõi d·∫°ng c√°c h√†m ho·∫∑c kh·ªëi logic c√≥ th·ªÉ d·ªÖ d√†ng ch√®n v√†o t·ªáp python.py c·ªßa b·∫°n.

üõ†Ô∏è Khung Chat Gemini T√≠ch H·ª£p Streamlit
ƒê√¢y l√† ƒëo·∫°n m√£ c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o giao di·ªán khung chat v√† t∆∞∆°ng t√°c v·ªõi API Gemini. B·∫°n ch·ªâ c·∫ßn ƒë·∫£m b·∫£o r·∫±ng th∆∞ vi·ªán google-genai ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t (pip install google-genai).

B∆∞·ªõc 1: Khai b√°o v√† Thi·∫øt l·∫≠p API Key
B·∫°n n√™n ƒë·∫∑t ph·∫ßn n√†y ·ªü ƒë·∫ßu t·ªáp python.py c·ªßa m√¨nh, ngay sau c√°c l·ªánh import kh√°c.

Python

import streamlit as st
from google import genai
from google.genai.errors import APIError
import os

# --- C·∫•u h√¨nh Gemini ---
# KHUY√äN D√ôNG: S·ª≠ d·ª•ng st.secrets cho Streamlit Cloud ho·∫∑c os.getenv cho Local
try:
    # ∆Øu ti√™n ƒë·ªçc t·ª´ Streamlit secrets (khuy·∫øn ngh·ªã cho deploy)
    API_KEY = st.secrets["GEMINI_API_KEY"]
except (KeyError, AttributeError):
    # N·∫øu kh√¥ng c√≥ secrets, ƒë·ªçc t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    API_KEY = os.getenv("GEMINI_API_KEY")

if API_KEY:
    try:
        # Kh·ªüi t·∫°o client Gemini
        client = genai.Client(api_key=API_KEY)
        MODEL_NAME = "gemini-2.5-flash" 
    except Exception as e:
        st.error(f"L·ªói khi kh·ªüi t·∫°o Gemini client: {e}")
        client = None
else:
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a API Gemini. Vui l√≤ng ƒë·∫∑t kh√≥a v√†o bi·∫øn m√¥i tr∆∞·ªùng 'GEMINI_API_KEY' ho·∫∑c t·ªáp 'secrets.toml'.")
    client = None
B∆∞·ªõc 2: H√†m Ch√≠nh T·∫°o Khung Chat
B·∫°n c√≥ th·ªÉ ƒë·∫∑t to√†n b·ªô logic chat n√†y v√†o m·ªôt h√†m v√† g·ªçi n√≥ t·∫°i v·ªã tr√≠ b·∫°n mu·ªën khung chat xu·∫•t hi·ªán trong ·ª©ng d·ª•ng c·ªßa m√¨nh.

Python

def gemini_chat_interface():
    """T·∫°o giao di·ªán khung chat t∆∞∆°ng t√°c v·ªõi Gemini."""
    
    # 1. Kh·ªüi t·∫°o L·ªãch s·ª≠ Chat
    if "messages" not in st.session_state:
        st.session_state.messages = []
        # Th√™m tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu
        st.session_state.messages.append({"role": "assistant", "content": "Xin ch√†o! T√¥i l√† Gemini. B·∫°n c√≥ c√¢u h·ªèi g√¨ cho t√¥i kh√¥ng?"})

    # 2. Hi·ªÉn th·ªã L·ªãch s·ª≠ Chat
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # 3. Khung Chat Input (ƒê·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng)
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ·ªü ƒë√¢y..."):
        
        if not client:
            st.error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh API Key.")
            return

        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ v√† hi·ªÉn th·ªã
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # 4. Chu·∫©n b·ªã v√† G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini
        with st.chat_message("assistant"):
            with st.spinner("Gemini ƒëang suy nghƒ©..."):
                try:
                    # Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ Streamlit sang ƒë·ªãnh d·∫°ng API c·∫ßn thi·∫øt
                    chat_history_for_api = [
                        {"role": "model" if msg["role"] == "assistant" else "user", 
                         "parts": [{"text": msg["content"]}]}
                        # B·ªè qua tin nh·∫Øn ch√†o m·ª´ng v√† tin nh·∫Øn cu·ªëi c√πng c·ªßa user
                        for msg in st.session_state.messages[:-1]
                        if msg["content"] != "Xin ch√†o! T√¥i l√† Gemini. B·∫°n c√≥ c√¢u h·ªèi g√¨ cho t√¥i kh√¥ng?"
                    ]

                    # Kh·ªüi t·∫°o phi√™n chat (ƒë·ªÉ Gemini duy tr√¨ ng·ªØ c·∫£nh)
                    chat = client.chats.create(
                        model=MODEL_NAME,
                        history=chat_history_for_api
                    )
                    
                    # G·ª≠i tin nh·∫Øn m·ªõi nh·∫•t
                    response = chat.send_message(prompt)
                    full_response = response.text
                    
                    # HI·ªÉn th·ªã ph·∫£n h·ªìi
                    st.markdown(full_response)
                    
                    # Th√™m ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω v√†o l·ªãch s·ª≠
                    st.session_state.messages.append({"role": "assistant", "content": full_response})

                except APIError as e:
                    error_message = f"L·ªói API: Kh√¥ng th·ªÉ giao ti·∫øp v·ªõi Gemini. L·ªói: {e}"
                    st.error(error_message)
                    st.session_state.messages.append({"role": "assistant", "content": error_message})
                except Exception as e:
                    error_message = f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}"
                    st.error(error_message)
                    st.session_state.messages.append({"role": "assistant", "content": error_message})


# --- L∆ØU √ù: Ph·∫ßn m√£ c·ªßa b·∫°n (v√≠ d·ª•: c√°c h√†m, giao di·ªán kh√°c) ·ªü ƒë√¢y ---
# st.header("·ª®ng D·ª•ng Ch√≠nh C·ªßa T√¥i") 
# # ... ƒëo·∫°n code kh√°c c·ªßa b·∫°n ...
# st.write("ƒê√¢y l√† n·ªôi dung tr∆∞·ªõc khung chat.")


# --- V·ªä TR√ç G·ªåI H√ÄM CHAT ---
# G·ªçi h√†m n√†y t·∫°i v·ªã tr√≠ b·∫°n mu·ªën khung chat xu·∫•t hi·ªán
if __name__ == '__main__':
    st.title("·ª®ng D·ª•ng C·ªßa T√¥i + Chatbot Gemini")
    
    # Gi·∫£ s·ª≠ ƒë√¢y l√† ƒëo·∫°n m√£ ban ƒë·∫ßu c·ªßa b·∫°n
    st.write("D·ªØ li·ªáu v√† giao di·ªán ch√≠nh c·ªßa ·ª©ng d·ª•ng b·∫°n ·ªü ƒë√¢y.")
    # st.selectbox(...)
    # st.dataframe(...)
    
    # G·ªçi h√†m chat
    st.divider() # D√πng ƒë·ªÉ ph√¢n t√°ch r√µ r√†ng giao di·ªán ch√≠nh v√† khung chat
    st.subheader("Tr√≤ chuy·ªán v·ªõi Gemini")
    gemini_chat_interface()
