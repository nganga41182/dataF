import streamlit as st
from google import genai
from google.genai.errors import APIError
import os
# --- C·∫•u h√¨nh ------------------------------------------------------------------

# T√™n bi·∫øn m√¥i tr∆∞·ªùng ch·ª©a API Key. B·∫°n n√™n ƒë·∫∑t kh√≥a API trong bi·∫øn m√¥i tr∆∞·ªùng
# t√™n l√† GEMINI_API_KEY
# N·∫øu kh√¥ng, b·∫°n c·∫ßn thay th·∫ø os.getenv("GEMINI_API_KEY") b·∫±ng kh√≥a API c·ªßa b·∫°n
# (nh∆∞ng KH√îNG N√äN L√ÄM V·∫¨Y trong ·ª©ng d·ª•ng th·ª±c t·∫ø).
API_KEY = os.getenv("GEMINI_API_KEY")

# Kh·ªüi t·∫°o client Gemini.
try:
    if API_KEY:
        client = genai.Client(api_key=API_KEY)
    else:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a API. Vui l√≤ng ƒë·∫∑t kh√≥a API c·ªßa b·∫°n v√†o bi·∫øn m√¥i tr∆∞·ªùng 'GEMINI_API_KEY'.")
        client = None # V·∫´n thi·∫øt l·∫≠p client th√†nh None n·∫øu l·ªói
except Exception as e:
    st.error(f"L·ªói khi kh·ªüi t·∫°o client Gemini: {e}")
    client = None

# M√¥ h√¨nh s·ª≠ d·ª•ng
MODEL_NAME = "gemini-2.5-flash" 

# --- Giao di·ªán v√† Logic Streamlit ----------------------------------------------

st.set_page_config(page_title="Streamlit Chatbot v·ªõi Gemini ü§ñ", layout="centered")
st.title("Chatbot H·ªèi ƒê√°p v·ªõi Gemini üí¨")

# 1. Kh·ªüi t·∫°o L·ªãch s·ª≠ Chat
# S·ª≠ d·ª•ng st.session_state ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
if "messages" not in st.session_state:
    st.session_state.messages = []
    # Th√™m tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu
    st.session_state.messages.append({"role": "assistant", "content": "Xin ch√†o! T√¥i l√† Gemini. B·∫°n c√≥ c√¢u h·ªèi g√¨ cho t√¥i kh√¥ng?"})

# 2. Hi·ªÉn th·ªã L·ªãch s·ª≠ Chat
# L·∫∑p qua t·∫•t c·∫£ tin nh·∫Øn ƒë√£ l∆∞u v√† hi·ªÉn th·ªã ch√∫ng
for message in st.session_state.messages:
    # S·ª≠ d·ª•ng st.chat_message ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn v·ªõi avatar ph√π h·ª£p
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# 3. Khung Chat Input (ƒê·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng)
# st.chat_input s·∫Ω lu√¥n n·∫±m ·ªü cu·ªëi m√†n h√¨nh v√† tr·∫£ v·ªÅ n·ªôi dung khi ng∆∞·ªùi d√πng nh·∫•n Enter
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ·ªü ƒë√¢y..."):
    if not client:
        # N·∫øu client kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o (do thi·∫øu API Key), d·ª´ng l·∫°i
        st.error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh API Key.")
    else:
        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ v√† hi·ªÉn th·ªã
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # 4. G·ªçi API Gemini v√† X·ª≠ l√Ω Ph·∫£n h·ªìi
        with st.chat_message("assistant"):
            # st.spinner s·∫Ω hi·ªÉn th·ªã th√¥ng b√°o "ƒêang ch·∫°y..." trong khi ch·ªù ph·∫£n h·ªìi
            with st.spinner("Gemini ƒëang suy nghƒ©..."):
                try:
                    # T·∫°o m·ªôt chu·ªói l·ªãch s·ª≠ chat ƒë·ªÉ truy·ªÅn cho m√¥ h√¨nh
                    # ƒê√¢y l√† c√°ch ƒë∆°n gi·∫£n, nh∆∞ng b·∫°n c√≥ th·ªÉ d√πng genai.Chat (client.chats.create)
                    # cho c√°c cu·ªôc tr√≤ chuy·ªán ph·ª©c t·∫°p h∆°n v√† c√≥ ng·ªØ c·∫£nh d√†i.
                    
                    # T√πy ch·ªçn 1: S·ª≠ d·ª•ng genai.Chat ƒë·ªÉ qu·∫£n l√Ω l·ªãch s·ª≠ tr√≤ chuy·ªán
                    # (Khuy√™n d√πng cho ·ª©ng d·ª•ng chat th·ª±c t·∫ø)
                    
                    # Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ st.session_state th√†nh ƒë·ªãnh d·∫°ng c·∫ßn thi·∫øt
                    history = []
                    for message in st.session_state.messages:
                        # B·ªè qua tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu (v√¨ n√≥ kh√¥ng ph·∫£i l√† ph·∫ßn c·ªßa l·ªãch s·ª≠ chat API)
                        if message.get("role") != "assistant" or message.get("content") != "Xin ch√†o! T√¥i l√† Gemini. B·∫°n c√≥ c√¢u h·ªèi g√¨ cho t√¥i kh√¥ng?":
                            # L∆∞·ª£c ƒë·ªì API y√™u c·∫ßu 'model' l√† 'assistant' v√† 'user' l√† 'user'
                            api_role = "model" if message["role"] == "assistant" else "user"
                            history.append({"role": api_role, "parts": [{"text": message["content"]}]})
                    
                    # Ch·ªâ l·∫•y l·ªãch s·ª≠ th·ª±c t·∫ø (b·ªè tin nh·∫Øn ch√†o m·ª´ng v√† tin nh·∫Øn cu·ªëi c√πng c·ªßa user ƒë·ªÉ tr√°nh tr√πng l·∫∑p)
                    # L·∫•y t·∫•t c·∫£ tin nh·∫Øn *tr·ª´* tin nh·∫Øn user v·ª´a g·ª≠i
                    chat_history_for_api = [
                        {"role": "model" if msg["role"] == "assistant" else "user", "parts": [{"text": msg["content"]}]}
                        for msg in st.session_state.messages[:-1]
                        if msg["content"] != "Xin ch√†o! T√¥i l√† Gemini. B·∫°n c√≥ c√¢u h·ªèi g√¨ cho t√¥i kh√¥ng?" # B·ªè tin nh·∫Øn ch√†o m·ª´ng
                    ]
                    
                    # Kh·ªüi t·∫°o ho·∫∑c ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán
                    chat = client.chats.create(
                        model=MODEL_NAME,
                        history=chat_history_for_api # Truy·ªÅn l·ªãch s·ª≠ tr∆∞·ªõc ƒë√≥
                    )
                    
                    # G·ª≠i tin nh·∫Øn m·ªõi nh·∫•t
                    response = chat.send_message(prompt)
                    
                    # L·∫•y n·ªôi dung ph·∫£n h·ªìi
                    full_response = response.text
                    
                    # HI·ªÉn th·ªã ph·∫£n h·ªìi
                    st.markdown(full_response)
                    
                    # Th√™m ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω v√†o l·ªãch s·ª≠
                    st.session_state.messages.append({"role": "assistant", "content": full_response})

                except APIError as e:
                    error_message = f"L·ªói API: Kh√¥ng th·ªÉ giao ti·∫øp v·ªõi Gemini. L·ªói: {e}"
                    st.error(error_message)
                    st.session_state.messages.append({"role": "assistant", "content": error_message})
                except Exception as e:
                    error_message = f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}"
                    st.error(error_message)
                    st.session_state.messages.append({"role": "assistant", "content": error_message})
üí° H∆∞·ªõng D·∫´n T√≠ch H·ª£p v√† Ch·∫°y
1. C√†i ƒë·∫∑t Th∆∞ vi·ªán
B·∫°n c·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán Streamlit v√† th∆∞ vi·ªán Python c·ªßa Google GenAI.

Bash

pip install streamlit google-genai
